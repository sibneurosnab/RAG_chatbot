import time
import os
import json
from pathlib import Path
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
import undetected_chromedriver as uc

# --- Настройки ---
COOKIES_OUTPUT_PATH = Path("D:/selfhost/n8n-data/cookies.txt")
USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36"
HEADLESS_MODE = True  # Фоновый режим
#DEBUG_PAUSE = 600  # Пауза для CAPTCHA (если нужен вход)
EMAIL = "bestgraphicsx1@gmail.com"  # Замени
PASSWORD = "PoPoPo12"  # Замени

# --- Функция для форматирования cookies в Netscape ---
def format_cookies_netscape(cookies):
    lines = ["# Netscape HTTP Cookie File\n# Generated by undetected-chromedriver script\n#\n"]
    for c in cookies:
        domain = c.get('domain', '')
        include_subdomains = str(domain.startswith('.')).upper()
        path = c.get('path', '/')
        secure = str(c.get('secure', False)).upper()
        expires = str(int(c.get('expiry', 0))) if c.get('expiry') else "0"
        name = c.get('name', '')
        value = c.get('value', '')
        if not name or not domain:
            continue
        lines.append("\t".join([domain, include_subdomains, path, secure, expires, name, value]))
    return "\n".join(lines) + "\n"

# --- Функция для загрузки cookies из Netscape файла ---
def load_cookies_from_netscape(file_path, driver):
    if not file_path.exists():
        print("Файл cookies не найден.")
        return
    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.readlines()
    for line in lines:
        if line.startswith("#") or not line.strip():
            continue
        parts = line.strip().split("\t")
        if len(parts) < 7:
            continue
        cookie = {
            "domain": parts[0],
            "name": parts[5],
            "value": parts[6],
            "path": parts[2],
            "secure": parts[3].lower() == "true",
            "expires": int(parts[4]) if parts[4] != "0" else None
        }
        try:
            driver.add_cookie(cookie)
        except Exception as e:
            print(f"Ошибка добавления cookie {cookie['name']}: {e}")

# --- Основной код ---
print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Запуск скрипта...")
print(f"Режим Headless: {HEADLESS_MODE}")
print(f"User Agent: {USER_AGENT}")
print(f"Путь к cookies: {COOKIES_OUTPUT_PATH}")

driver = None
try:
    # Настройка Chrome
    options = uc.ChromeOptions()
    options.add_argument(f"--user-agent={USER_AGENT}")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    if HEADLESS_MODE:
        options.add_argument("--headless=new")

    # Запуск браузера
    print("Запуск Chrome...")
    driver = uc.Chrome(options=options, headless=HEADLESS_MODE, version_main=135)

    # Загрузка cookies
    print("Загрузка cookies из файла...")
    driver.get("https://www.youtube.com")  # Открываем домен для cookies
    load_cookies_from_netscape(COOKIES_OUTPUT_PATH, driver)
    driver.refresh()
    print("Cookies загружены, страница обновлена.")

    # Ждем загрузки страницы
    WebDriverWait(driver, 30).until(
        EC.presence_of_element_located((By.TAG_NAME, "body"))
    )
    print("YouTube загружен.")

    # Проверка, авторизован ли аккаунт
    is_logged_in = False
    try:
        WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "img#img[alt='Avatar image']"))
        )
        print("Аккаунт уже авторизован.")
        is_logged_in = True
    except TimeoutException:
        print("Аккаунт не авторизован, требуется вход.")

    # Кнопка "Принять все"
    if not is_logged_in:
        accept_button_selectors = [
            'button[aria-label="Accept the use of cookies and other data for the purposes described"]',
            'button[aria-label="Принять использование файлов cookie и других данных в описанных целях"]',
            'button:has-text("Accept all")',
            'button:has-text("Принять все")'
        ]
        accepted = False
        for selector in accept_button_selectors:
            try:
                print(f"Ищем кнопку: {selector}")
                button = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, selector))
                )
                button.click()
                print("Кнопка согласия нажата.")
                time.sleep(1.5)
                accepted = True
                break
            except TimeoutException:
                continue
            except Exception as e:
                print(f"Ошибка кнопки согласия: {e}")
                continue
        if not accepted:
            print("Кнопка согласия не найдена.")

    # Вход в аккаунт, если не авторизован
    if not is_logged_in:
        print("Попытка входа...")
        try:
            login_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.CSS_SELECTOR, 'a[href*="accounts.google.com"]'))
            )
            login_button.click()
            print("Кнопка 'Войти' нажата.")

            email_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.ID, "identifierId"))
            )
            email_input.send_keys(EMAIL)
            driver.find_element(By.ID, "identifierNext").click()
            print("Email введен.")

            password_input = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.NAME, "Passwd"))
            )
            password_input.send_keys(PASSWORD)
            driver.find_element(By.ID, "passwordNext").click()
            print("Пароль введен.")

            if not HEADLESS_MODE:
                print(f"Пауза на {DEBUG_PAUSE} сек для CAPTCHA/проверки...")
                time.sleep(DEBUG_PAUSE)

        except TimeoutException as te:
            print(f"Ошибка входа: {te}")
        except Exception as e:
            print(f"Ошибка входа: {e}")

    # Проверка входа
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, "img#img[alt='Avatar image']"))
        )
        print("Вход успешен.")
    except TimeoutException:
        print("Вход не выполнен.")

    # Получение cookies
    print("Получение cookies...")
    cookies = driver.get_cookies()
    print(f"Получено {len(cookies)} cookies.")

    if cookies:
        print("Форматирование cookies...")
        netscape_cookies = format_cookies_netscape(cookies)
        print(f"Сохранение в: {COOKIES_OUTPUT_PATH}")
        COOKIES_OUTPUT_PATH.parent.mkdir(parents=True, exist_ok=True)
        with open(COOKIES_OUTPUT_PATH, "w", encoding="utf-8") as f:
            f.write(netscape_cookies)
        print("Cookies сохранены.")
    else:
        print("Cookies не получены.")

except TimeoutException as te:
    print(f"Ошибка таймаута: {te}")
except WebDriverException as we:
    print(f"Ошибка WebDriver: {we}")
except Exception as e:
    print(f"Общая ошибка: {e}")
finally:
    if driver:
        try:
            print("Закрытие браузера...")
            driver.quit()
        except Exception as e:
            print(f"Ошибка закрытия: {e}")
    print(f"[{time.strftime('%Y-%m-%d %H:%M:%S')}] Скрипт завершен.")